{"version":3,"sources":["utils/selectFields.js","services/api.js","styles/StoryStyes.js","components/Story.js","mappers/mapTime.js","styles/StoryContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","useState","story","setStory","useEffect","data-testid","href","className","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","data-test-id","slice","map","key","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.254c4425.chunk.js","sourcesContent":["export const selectFields = ({\n\tid,\n\tby,\n\turl,\n\ttime,\n\ttitle\n} = {}) => ({\n\tid,\n\tby,\n\turl,\n\ttime,\n\ttitle\n})","import axios from 'axios'\n\nimport {\n\tselectFields\n} from '../utils/selectFields'\n\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0/'\nexport const newStoriesUrl = `${baseUrl}newstories.json`\nexport const storyUrl = `${baseUrl}item/`\n\n\n\nexport const getStory = async (storyId) => {\n\tconst result = await axios.get(`${storyUrl + storyId}.json`).then(({\n\t\tdata\n\t}) => data && selectFields(data))\n\treturn result\n}\n\n\nexport const getStoryIds = async () => {\n\tconst result = await axios.get(newStoriesUrl).then(({\n\t\tdata\n\t}) => data)\n\treturn result\n}","import styled from 'styled-components'\n\n\nexport const StoryWrapper = styled.section `\npadding-top: 10px;\nmargin-bottom: 20px;\nborder-top 1px solid #cccccc;\n\n&:first-of-type {\n\tborder-top: 0;\n}\n\n&:last-of-type {\n\tmargin-bottom: 0;\n\tpadding-bottom: 0;\n\n}\n\n`\nexport const StoryTitle = styled.h1 `\n\nmargin-bottom: 5px;\nfont-size: 18px;\nline-height: 1.8;\nmargin: 0;\ntext-decoration: none;\n\na{\n\tcolor: #2e2e2c;\n\tbackground-color: #add8e6;\n\ttext-decoration: none;\n}\n`\nexport const StoryMeta = styled.div ` \n\nfont-style: italic;\n> span:not(:first-child):before {\ncontent: '*';\nmargin-right: 7px;\nmargin-left: 7px;\n}\n\n.story__meta-bold {\n\tfont-weight: bold;\n}\n\n\n`\nexport const StoryMetaElement = styled.span `\nfont-weight: bold;\ncolor: ${props => props.color || 'red'}\n`","import React, { useState, useEffect } from \"react\";\nimport { getStory } from \"../services/api\";\nimport {\n  StoryWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement,\n} from \"../styles/StoryStyes\";\n\nimport { mapTime } from \"../mappers/mapTime\";\n\nexport const Story = ({ storyId }) => {\n  const [story, setStory] = useState({});\n\n  useEffect(() => {\n    getStory(storyId).then((data) => data && data.url && setStory(data));\n  }, [storyId]);\n\n  return story && story.url\n    ? (\n      <StoryWrapper data-testid=\"story\">\n        <StoryTitle>\n          <a href={story.url}>{story.title}</a>\n        </StoryTitle>\n\n        <StoryMeta>\n          <span className=\"story__by\" data-testid=\"story-by\">\n            <StoryMetaElement color=\"#000\">By:</StoryMetaElement>\n            {` `}\n            {story.by}\n          </span>\n          <span className=\"story__time\" data-testid=\"story-time\">\n            <StoryMetaElement color=\"#000\">Posted:</StoryMetaElement>\n            {` `}\n            {mapTime(story.time)}\n          </span>\n        </StoryMeta>\n      </StoryWrapper>\n    )\n    : null;\n};\n","export const mapTime = timestamp => {\n\tconst seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n\tlet interval = Math.floor(seconds / 31536000);\n\n\tif (interval > 1) {\n\t\treturn `${interval} years`;\n\t}\n\tinterval = Math.floor(seconds / 2592000);\n\n\tif (interval > 1) {\n\t\treturn `${interval} months`;\n\t}\n\tinterval = Math.floor(seconds / 86400);\n\n\tif (interval > 1) {\n\t\treturn `${interval} days`;\n\t}\n\tinterval = Math.floor(seconds / 3600);\n\n\tif (interval > 1) {\n\t\treturn `${interval} hours`;\n\t}\n\tinterval = Math.floor(seconds / 60);\n\n\tif (interval > 1) {\n\t\treturn `${interval} minutes`;\n\t}\n\n\treturn `${Math.floor(seconds)} seconds`;\n};","import styled, {\n\tcreateGlobalStyle\n} from 'styled-components'\n\n\n\nexport const GlobalStyle = createGlobalStyle `\n  html {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    -webkit-box-sizing: inherit;\n            box-sizing: inherit;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    color: #202020;\n    background-color: #fafafe;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 16px;\n  }\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StoriesContainerWrapper = styled.main `\n  max-width: 1140px;\n  padding: 20px 15px;\n  margin: auto;\n`;","import { useState, useEffect } from \"react\";\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants\";\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n\n    setLoading(false);\n  }, [count, loading]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [handleScroll]);\n\n  return { count };\n};\n","export const MAX_STORIES = 500\nexport const STORY_INCREMENT = 30","export const debounce = (func, wait, immediate, args) => {\n\tlet timeout;\n\n\treturn () => {\n\t\tconst context = this;\n\t\tconst callNow = immediate && !timeout;\n\t\tconst later = () => {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, args);\n\t\t};\n\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\n\t\tif (callNow) func.apply(context, args);\n\t};\n};","import React, { useEffect, useState } from \"react\";\nimport { getStoryIds } from \"../services/api\";\nimport { Story } from \"../components/Story\";\nimport {\n  GlobalStyle,\n  StoriesContainerWrapper,\n} from \"../styles/StoryContainerStyles\";\nimport { useInfiniteScroll } from \"../hooks/useInfiniteScroll\";\n\nexport const StoriesContainer = () => {\n  const { count } = useInfiniteScroll();\n  const [storyIds, setStoryIds] = useState([]);\n\n  useEffect(() => {\n    getStoryIds().then((data) => setStoryIds(data));\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <StoriesContainerWrapper data-test-id=\"stories-container\">\n        <h1>Hacker News Stories</h1>\n        {storyIds.slice(0, count).map((storyId) => (\n          <Story key={storyId} storyId={storyId} />\n        ))}\n      </StoriesContainerWrapper>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n\tStoriesContainer\n} from \"./containers/StoriesContainer\";\nexport const App = () => {\n\treturn <StoriesContainer / > ;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}